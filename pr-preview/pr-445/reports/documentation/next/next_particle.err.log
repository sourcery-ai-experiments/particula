Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Example demonstrating the usage of particle distribution strategies

# Assuming necessary imports
import numpy as np
from particula.next.particle import (
    create_particle_strategy,
    Particle,
    MassBasedStrategy,
    RadiiBasedStrategy,
    SpeciatedMassStrategy,
)

# Creating particle distribution examples
mass_distribution = np.array([100, 200, 300], dtype=np.float64)
density = np.float64(2.5)
concentration = np.array([10, 20, 30], dtype=np.float64)

# Instantiate a particle strategy
mass_based_strategy = MassBasedStrategy()

# Create a Particle instance using the MassBasedStrategy
particle = Particle(strategy=mass_based_strategy,
                    distribution=mass_distribution,
                    density=density,
                    concentration=concentration)

# Accessing calculated properties
print("Mass of particles:", particle.get_mass())
print("Radius of particles:", particle.get_radius())
print("Total mass of the particle distribution:", particle.get_total_mass())
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 19[0m
[1;32m     16[0m concentration [38;5;241m=[39m np[38;5;241m.[39marray([[38;5;241m10[39m, [38;5;241m20[39m, [38;5;241m30[39m], dtype[38;5;241m=[39mnp[38;5;241m.[39mfloat64)
[1;32m     18[0m [38;5;66;03m# Instantiate a particle strategy[39;00m
[0;32m---> 19[0m mass_based_strategy [38;5;241m=[39m [43mMassBasedStrategy[49m[43m([49m[43m)[49m
[1;32m     21[0m [38;5;66;03m# Create a Particle instance using the MassBasedStrategy[39;00m
[1;32m     22[0m particle [38;5;241m=[39m Particle(strategy[38;5;241m=[39mmass_based_strategy,
[1;32m     23[0m                     distribution[38;5;241m=[39mmass_distribution,
[1;32m     24[0m                     density[38;5;241m=[39mdensity,
[1;32m     25[0m                     concentration[38;5;241m=[39mconcentration)

[0;31mTypeError[0m: Can't instantiate abstract class MassBasedStrategy with abstract method add_mass

