Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
lake['mean_properties'] = size_distribution.sizer_mean_properties(
    stream=lake['smps_2d'],
    diameter_units='nm',
)

# list out the header
for header in lake['mean_properties'].header:
    print(header)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAssertionError[0m                            Traceback (most recent call last)
Cell [0;32mIn[3], line 1[0m
[0;32m----> 1[0m lake[[38;5;124m'[39m[38;5;124mmean_properties[39m[38;5;124m'[39m] [38;5;241m=[39m [43msize_distribution[49m[38;5;241;43m.[39;49m[43msizer_mean_properties[49m[43m([49m
[1;32m      2[0m [43m    [49m[43mstream[49m[38;5;241;43m=[39;49m[43mlake[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43msmps_2d[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m
[1;32m      3[0m [43m    [49m[43mdiameter_units[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mnm[39;49m[38;5;124;43m'[39;49m[43m,[49m
[1;32m      4[0m [43m)[49m
[1;32m      6[0m [38;5;66;03m# list out the header[39;00m
[1;32m      7[0m [38;5;28;01mfor[39;00m header [38;5;129;01min[39;00m lake[[38;5;124m'[39m[38;5;124mmean_properties[39m[38;5;124m'[39m][38;5;241m.[39mheader:

File [0;32m/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/particula/data/process/size_distribution.py:172[0m, in [0;36msizer_mean_properties[0;34m(stream, sizer_limits, density, diameter_units)[0m
[1;32m    166[0m unit_mass_ug_m3_pm10 [38;5;241m=[39m np[38;5;241m.[39mzeros_like(total_concentration) [38;5;241m*[39m np[38;5;241m.[39mnan
[1;32m    168[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mlen[39m(stream[38;5;241m.[39mtime)):
[1;32m    169[0m     total_concentration[i], unit_mass_ug_m3[i], mean_diameter_nm[i], \
[1;32m    170[0m         mean_vol_diameter_nm[i], geometric_mean_diameter_nm[i], \
[1;32m    171[0m         mode_diameter[i], mode_diameter_mass[i] [38;5;241m=[39m \
[0;32m--> 172[0m         [43mmean_properties[49m[43m([49m
[1;32m    173[0m [43m        [49m[43msizer_dndlogdp_smps[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[43mi[49m[43m][49m[43m,[49m
[1;32m    174[0m [43m        [49m[43msizer_diameter_smps[49m[43m,[49m
[1;32m    175[0m [43m        [49m[43msizer_limits[49m[38;5;241;43m=[39;49m[43msizer_limits[49m
[1;32m    176[0m [43m    [49m[43m)[49m
[1;32m    178[0m     [38;5;66;03m# total PM 100 nm concentration[39;00m
[1;32m    179[0m     total_concentration_pm01[i], unit_mass_ug_m3_pm01[i], _, _, _, _, _ [38;5;241m=[39m \
[1;32m    180[0m         mean_properties(
[1;32m    181[0m         sizer_dndlogdp_smps[:, i],
[1;32m    182[0m         sizer_diameter_smps,
[1;32m    183[0m         sizer_limits[38;5;241m=[39m[[38;5;241m0[39m, [38;5;241m100[39m]
[1;32m    184[0m     )

File [0;32m/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/particula/data/process/size_distribution.py:50[0m, in [0;36mmean_properties[0;34m(sizer_dndlogdp, sizer_diameter, total_concentration, sizer_limits)[0m
[1;32m     23[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m     24[0m [38;5;124;03mCalculates the mean properties of the size distribution.[39;00m
[1;32m     25[0m 
[0;32m   (...)[0m
[1;32m     46[0m [38;5;124;03m    Mode diameter of the distribution by volume.[39;00m
[1;32m     47[0m [38;5;124;03m"""[39;00m
[1;32m     49[0m [38;5;66;03m# convert to dn from dn/dlogDp[39;00m
[0;32m---> 50[0m sizer_dn [38;5;241m=[39m [43mconvert[49m[38;5;241;43m.[39;49m[43mconvert_sizer_dn[49m[43m([49m[43msizer_diameter[49m[43m,[49m[43m [49m[43msizer_dndlogdp[49m[43m)[49m
[1;32m     51[0m [38;5;28;01mif[39;00m total_concentration [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m     52[0m     sizer_dn [38;5;241m=[39m sizer_dn [38;5;241m*[39m total_concentration [38;5;241m/[39m np[38;5;241m.[39msum(sizer_dn)

File [0;32m/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/particula/util/convert.py:409[0m, in [0;36mconvert_sizer_dn[0;34m(diameter, dn_dlogdp, inverse)[0m
[1;32m    377[0m [38;5;28;01mdef[39;00m [38;5;21mconvert_sizer_dn[39m(
[1;32m    378[0m     diameter: np[38;5;241m.[39mndarray,
[1;32m    379[0m     dn_dlogdp: np[38;5;241m.[39mndarray,
[1;32m    380[0m     inverse: [38;5;28mbool[39m [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[1;32m    381[0m ) [38;5;241m-[39m[38;5;241m>[39m np[38;5;241m.[39mndarray:
[1;32m    382[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    383[0m [38;5;124;03m    Converts the sizer data from dn/dlogdp to d_num.[39;00m
[1;32m    384[0m 
[0;32m   (...)[0m
[1;32m    407[0m [38;5;124;03m    # future: Address potential over-counting in last/first bin[39;00m
[1;32m    408[0m [38;5;124;03m    """[39;00m
[0;32m--> 409[0m     [38;5;28;01massert[39;00m [38;5;28mlen[39m(diameter) [38;5;241m==[39m [38;5;28mlen[39m(dn_dlogdp) [38;5;241m>[39m [38;5;241m0[39m, \
[1;32m    410[0m         [38;5;124m"[39m[38;5;124mInputs must be non-empty arrays of the same length.[39m[38;5;124m"[39m
[1;32m    411[0m     [38;5;66;03m# Compute the bin widths[39;00m
[1;32m    412[0m     delta [38;5;241m=[39m np[38;5;241m.[39mzeros_like(diameter)

[0;31mAssertionError[0m: Inputs must be non-empty arrays of the same length.

